/*
 * @Author: WuDaoTingFeng.yzh 2683849644@qq.com
 * @Date: 2024-01-12 09:12:50
 * @LastEditors: WuDaoTingFeng.yzh 2683849644@qq.com
 * @LastEditTime: 2024-01-12 14:57:27
 * @FilePath: \vite-vue-ts-seed\vite.config.ts
 * @Description: ËøôÊòØÈªòËÆ§ËÆæÁΩÆ,ËØ∑ËÆæÁΩÆ`customMade`, ÊâìÂºÄkoroFileHeaderÊü•ÁúãÈÖçÁΩÆ ËøõË°åËÆæÁΩÆ: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 */
import vue from '@vitejs/plugin-vue';
import path from 'path';
import { ConfigEnv, UserConfig, defineConfig, loadEnv } from 'vite';

import AutoImport from 'unplugin-auto-import/vite';
import IconsResolver from 'unplugin-icons/resolver';
import Icons from 'unplugin-icons/vite';
import { ElementPlusResolver } from 'unplugin-vue-components/resolvers';
import Components from 'unplugin-vue-components/vite';
import viteCompression from 'vite-plugin-compression';
import { createSvgIconsPlugin } from 'vite-plugin-svg-icons';
const pathSrc = path.resolve(__dirname, 'src');
import UnoCSS from 'unocss/vite';
export default ({ command, mode }: ConfigEnv): UserConfig => {
  const env = loadEnv(mode, process.cwd());

  console.log('üöÄ ~ comments, module-env:', mode, env, command);
  console.log('object', env.VITE_APP_PORT);

  return defineConfig({
    envDir: path.resolve(__dirname, './src/env'),
    // ËÆæÁΩÆÂà´Âêç
    resolve: {
      alias: {
        '@': path.resolve(__dirname, './src'), // @‰ª£Êõøsrc
        '#': path.resolve(__dirname, './types'), // #‰ª£Êõøtypes
      },
    },
    css: {
      preprocessorOptions: {
        scss: {
          javascriptEnabled: true,
          additionalData: `@use "@/assets/styles/variables.scss" as *;`,
        },
      },
    },
    plugins: [
      vue(),
      AutoImport({
        resolvers: [
          // Ëá™Âä®ÂØºÂÖ• Element Plus Áõ∏ÂÖ≥ÂáΩÊï∞ÔºåÂ¶ÇÔºöElMessage, ElMessageBox... (Â∏¶Ê†∑Âºè)
          ElementPlusResolver(),
          // Ëá™Âä®ÂØºÂÖ•ÂõæÊ†áÁªÑ‰ª∂
          IconsResolver({}),
        ],
        vueTemplate: true, // ÊòØÂê¶Âú® vue Ê®°Êùø‰∏≠Ëá™Âä®ÂØºÂÖ•
        include: [
          /\.tsx?$/, // Ê∑ªÂä†ÂØπ tsx Êñá‰ª∂ÁöÑÊîØÊåÅ
          /\.jsx?$/,
          /\.vue$/,
          /\.vue\?vue/,
          /\.md$/,
        ],

        // global imports to register
        imports: [
          // presets
          'vue',
          'vue-router',
          // custom
        ],
        eslintrc: {
          enabled: false,
          filepath: './.eslintrc-auto-import.json',
          globalsPropValue: true,
        },
        dts: path.resolve(pathSrc, 'types', 'auto-imports.d.ts'), // Ëá™Âä®ÂØºÂÖ•ÁªÑ‰ª∂Á±ªÂûãÂ£∞ÊòéÊñá‰ª∂‰ΩçÁΩÆÔºåÈªòËÆ§Ê†πÁõÆÂΩï
      }),
      Components({
        resolvers: [
          // Ëá™Âä®ÂØºÂÖ• Element Plus ÁªÑ‰ª∂
          ElementPlusResolver(),
          // Ëá™Âä®Ê≥®ÂÜåÂõæÊ†áÁªÑ‰ª∂
          IconsResolver({
            enabledCollections: ['ep'], // element-plusÂõæÊ†áÂ∫ìÔºåÂÖ∂‰ªñÂõæÊ†áÂ∫ì https://icon-sets.iconify.design/
          }),
        ],
        // Ë¶ÅÊêúÁ¥¢ÁªÑ‰ª∂ÁöÑÁõÆÂΩïÁöÑÁõ∏ÂØπË∑ØÂæÑ
        dirs: ['src/components', 'src/**/components'],
        // ÁªÑ‰ª∂ÁöÑÊúâÊïàÊñá‰ª∂Êâ©Â±ïÂêç„ÄÇ
        extensions: ['vue', '.ts', '.js', '.mjs'],
        // ÊêúÁ¥¢Â≠êÁõÆÂΩï
        deep: true,
        // ÁîüÊàê `components.d.ts` ÂÖ®Â±ÄÂ£∞ÊòéÔºå
        // ‰πüÊé•ÂèóËá™ÂÆö‰πâÊñá‰ª∂ÂêçÁöÑË∑ØÂæÑ
        dts: path.resolve(pathSrc, 'types', 'components.d.ts'), //  Ëá™Âä®ÂØºÂÖ•ÁªÑ‰ª∂Á±ªÂûãÂ£∞ÊòéÊñá‰ª∂‰ΩçÁΩÆÔºåÈªòËÆ§Ê†πÁõÆÂΩï
        // ÂÖÅËÆ∏Â≠êÁõÆÂΩï‰Ωú‰∏∫ÁªÑ‰ª∂ÁöÑÂëΩÂêçÁ©∫Èó¥ÂâçÁºÄ„ÄÇ
        directoryAsNamespace: false,
        // ÂøΩÁï•ÂëΩÂêçÁ©∫Èó¥ÂâçÁºÄÁöÑÂ≠êÁõÆÂΩïË∑ØÂæÑ
        // ÂΩì`directoryAsNamespace: true` Êó∂ÊúâÊïà
        globalNamespaces: [],
        // Ëá™Âä®ÂØºÂÖ•Êåá‰ª§
        // ÈªòËÆ§ÂÄºÔºöVue 3 ÁöÑ`true`ÔºåVue 2 ÁöÑ`false`
        // ÈúÄË¶Å Babel Êù•‰∏∫ Vue 2 ËøõË°åËΩ¨Êç¢ÔºåÂá∫‰∫éÊÄßËÉΩËÄÉËôëÔºåÂÆÉÈªòËÆ§Â§Ñ‰∫éÁ¶ÅÁî®Áä∂ÊÄÅ„ÄÇ
        directives: true,
        include: [/.vue$/, /\.vue\?vue/, /\.md$/, /\.tsx?$/, /\.jsx?$/], // Ê∑ªÂä†ÂØπ tsx Âíå jsx Êñá‰ª∂ÁöÑÊîØÊåÅ
        exclude: [/[/]node_modules[/]/, /[/].git[/]/, /[/].nuxt[/]/],
      }),
      Icons({
        // Ëá™Âä®ÂÆâË£ÖÂõæÊ†áÂ∫ì
        autoInstall: true,
      }),
      createSvgIconsPlugin({
        // ÊåáÂÆöÈúÄË¶ÅÁºìÂ≠òÁöÑÂõæÊ†áÊñá‰ª∂Â§π
        iconDirs: [path.resolve(process.cwd(), 'src/assets/icons')],
        // ÊåáÂÆösymbolIdÊ†ºÂºè
        symbolId: 'icon-[dir]-[name]',
      }),
      UnoCSS({
        /* options */
      }),
      {
        ...viteCompression(),
        apply: 'build',
      },
    ],
    server: {
      host: 'localhost',
      port: Number(env.VITE_APP_PORT),
      open: true,
      proxy: {
        [env.VITE_APP_BASE_API]: {
          target: 'http://www.youlai.tech:9999', // ÊúâÊù•ÂïÜÂüéÁ∫ø‰∏äÊé•Âè£Âú∞ÂùÄ
          changeOrigin: true,
          rewrite: (path) => path.replace(new RegExp('^' + env.VITE_APP_BASE_API), ''),
        },
      },
    },

    build: {
      chunkSizeWarningLimit: 2000, // Ê∂àÈô§ÊâìÂåÖÂ§ßÂ∞èË∂ÖËøá500kbË≠¶Âëä
      minify: 'terser', // Vite 2.6.x ‰ª•‰∏äÈúÄË¶ÅÈÖçÁΩÆ minify: "terser", terserOptions ÊâçËÉΩÁîüÊïà
      terserOptions: {
        compress: {
          keep_infinity: true, // Èò≤Ê≠¢ Infinity Ë¢´ÂéãÁº©Êàê 1/0ÔºåËøôÂèØËÉΩ‰ºöÂØºËá¥ Chrome ‰∏äÁöÑÊÄßËÉΩÈóÆÈ¢ò
          drop_console: true, // Áîü‰∫ßÁéØÂ¢ÉÂéªÈô§ console
          drop_debugger: true, // Áîü‰∫ßÁéØÂ¢ÉÂéªÈô§ debugger
        },
        format: {
          comments: false, // Âà†Èô§Ê≥®Èáä
        },
      },
      rollupOptions: {
        output: {
          manualChunks: {
            vue: ['vue', 'pinia', 'vue-router'],
            elementIcons: ['@element-plus/icons-vue'],
          },
          // Áî®‰∫é‰ªéÂÖ•Âè£ÁÇπÂàõÂª∫ÁöÑÂùóÁöÑÊâìÂåÖËæìÂá∫Ê†ºÂºè[name]Ë°®Á§∫Êñá‰ª∂Âêç,[hash]Ë°®Á§∫ËØ•Êñá‰ª∂ÂÜÖÂÆπhashÂÄº
          entryFileNames: 'js/[name].[hash].js',
          // Áî®‰∫éÂëΩÂêç‰ª£Á†ÅÊãÜÂàÜÊó∂ÂàõÂª∫ÁöÑÂÖ±‰∫´ÂùóÁöÑËæìÂá∫ÂëΩÂêç
          chunkFileNames: 'js/[name].[hash].js',
          // Áî®‰∫éËæìÂá∫ÈùôÊÄÅËµÑÊ∫êÁöÑÂëΩÂêçÔºå[ext]Ë°®Á§∫Êñá‰ª∂Êâ©Â±ïÂêç
          assetFileNames: (assetInfo: any) => {
            const info = assetInfo.name.split('.');
            let extType = info[info.length - 1];
            // console.log('Êñá‰ª∂‰ø°ÊÅØ', assetInfo.name)
            if (/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/i.test(assetInfo.name)) {
              extType = 'media';
            } else if (/\.(png|jpe?g|gif|svg)(\?.*)?$/.test(assetInfo.name)) {
              extType = 'img';
            } else if (/\.(woff2?|eot|ttf|otf)(\?.*)?$/i.test(assetInfo.name)) {
              extType = 'fonts';
            }
            return `${extType}/[name].[hash].[ext]`;
          },
        },
      },
    },
  });
};
